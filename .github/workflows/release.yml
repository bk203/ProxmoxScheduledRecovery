name: Release

on:
  push:
    tags:
      - '*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --dev

      - name: Lint
        run: uv run ruff check .

      - name: Build package
        run: uv build

      - name: Extract version from tag
        id: version
        env:
          TAG_NAME: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}
        run: |
          echo "version=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            VERSION="${{ steps.version.outputs.version }}"
            CHANGELOG=$(awk "/^## \[$VERSION\]/{flag=1;next}/^## \[/{flag=0}flag" CHANGELOG.md || echo "No changelog found for version $VERSION")
          else
            CHANGELOG="No changelog available"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes in ${{ github.ref_name }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            Download the appropriate wheel for your Python version:
            
            - `proxmoxscheduledrecovery-${{ steps.version.outputs.version }}-py3-none-any.whl` - Universal Python wheel
            - `proxmoxscheduledrecovery-${{ steps.version.outputs.version }}.tar.gz` - Source distribution
            
            Install with:
            ```bash
            pip install proxmoxscheduledrecovery-${{ steps.version.outputs.version }}-py3-none-any.whl
            ```
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/proxmoxscheduledrecovery-${{ steps.version.outputs.version }}-py3-none-any.whl
          asset_name: proxmoxscheduledrecovery-${{ steps.version.outputs.version }}-py3-none-any.whl
          asset_content_type: application/octet-stream

      - name: Upload Source Distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/proxmoxscheduledrecovery-${{ steps.version.outputs.version }}.tar.gz
          asset_name: proxmoxscheduledrecovery-${{ steps.version.outputs.version }}.tar.gz
          asset_content_type: application/gzip
